generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:ganteng@localhost:5432/project-paramata?schema=public"
}

model User {
  id                    String                 @id @default(uuid())
  name                  String
  email                 String                 @unique
  password              String
  role                  Role
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  affectedUserLogs      ActivityLog[]          @relation("AffectedUserLogs")
  activities            ActivityLog[]
  calibrations          Calibration[]
  calibrationStatusLogs CalibrationStatusLog[]
  inventoryChecks       InventoryCheck[]
  maintenances          Maintenance[]
  maintenanceStatusLogs MaintenanceStatusLog[]
  notifications         Notification[]
  rentals               Rental[]
  rentalStatusLogs      RentalStatusLog[]
}

model Item {
  serialNumber        String               @id
  name                String
  partNumber          String
  sensor              String?
  description         String?
  customerId          String?
  status              ItemStatus           @default(AVAILABLE)
  lastVerifiedAt      DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  activityLogs        ActivityLog[]
  calibrations        Calibration[]
  inventoryCheckItems InventoryCheckItem[]
  customer            Vendor?              @relation("CustomerItems", fields: [customerId], references: [id])
  histories           ItemHistory[]
  maintenances        Maintenance[]
  rentals             Rental[]
}

model Rental {
  id                  String            @id @default(uuid())
  itemSerial          String
  userId              String
  status              RequestStatus     @default(PENDING)
  startDate           DateTime
  endDate             DateTime?
  returnDate          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  doNumber            String?
  poNumber            String?
  renterName          String?
  renterPhone         String?
  renterAddress       String?
  initialCondition    String?
  returnCondition     String?
  activityLogs        ActivityLog[]
  item                Item              @relation(fields: [itemSerial], references: [serialNumber])
  user                User              @relation(fields: [userId], references: [id])
  statusLogs          RentalStatusLog[]
}

model Calibration {
  id                String                  @id @default(uuid())
  itemSerial        String
  userId            String
  status            RequestStatus           @default(PENDING)
  calibrationDate   DateTime
  validUntil        DateTime?
  certificateNumber String?
  certificateUrl    String?
  vendorId          String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  notes             String?
  activityLogs      ActivityLog[]
  item              Item                    @relation(fields: [itemSerial], references: [serialNumber])
  user              User                    @relation(fields: [userId], references: [id])
  vendor            Vendor?                 @relation(fields: [vendorId], references: [id])
  certificate       CalibrationCertificate?
  statusLogs        CalibrationStatusLog[]
}

model CalibrationCertificate {
  id             String                @id @default(uuid())
  calibrationId  String                @unique
  vendorAddress  String?
  vendorPhone    String?
  vendorFax      String?
  vendorName     String?
  manufacturer   String?
  instrumentName String?
  modelNumber    String?
  configuration  String?
  approvedBy     String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  calibration    Calibration           @relation(fields: [calibrationId], references: [id], onDelete: Cascade)
  gasEntries     GasCalibrationEntry[]
  testEntries    TestResultEntry[]
}

model GasCalibrationEntry {
  id               String                 @id @default(uuid())
  certificateId    String
  gasType          String
  gasConcentration String
  gasBalance       String
  gasBatchNumber   String
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  certificate      CalibrationCertificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model TestResultEntry {
  id            String                 @id @default(uuid())
  certificateId String
  testSensor    String
  testSpan      String
  testResult    String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  certificate   CalibrationCertificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id              String                 @id @default(uuid())
  itemSerial      String
  userId          String
  status          RequestStatus          @default(PENDING)
  startDate       DateTime               @default(now())
  endDate         DateTime?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  activityLogs    ActivityLog[]
  item            Item                   @relation(fields: [itemSerial], references: [serialNumber])
  user            User                   @relation(fields: [userId], references: [id])
  statusLogs      MaintenanceStatusLog[]
  serviceReport   ServiceReport?
  technicalReport TechnicalReport?
}

model ServiceReport {
  id                       String              @id @default(uuid())
  maintenanceId            String              @unique
  reportNumber             String?
  customer                 String?
  location                 String?
  brand                    String?
  model                    String?
  serialNumber             String?
  dateIn                   DateTime?
  reasonForReturn          String?
  findings                 String?
  action                   String?
  sensorCO                 Boolean             @default(false)
  sensorH2S                Boolean             @default(false)
  sensorO2                 Boolean             @default(false)
  sensorLEL                Boolean             @default(false)
  lampClean                Boolean             @default(false)
  lampReplace              Boolean             @default(false)
  pumpTested               Boolean             @default(false)
  pumpRebuilt              Boolean             @default(false)
  pumpReplaced             Boolean             @default(false)
  pumpClean                Boolean             @default(false)
  instrumentCalibrate      Boolean             @default(false)
  instrumentUpgrade        Boolean             @default(false)
  instrumentCharge         Boolean             @default(false)
  instrumentClean          Boolean             @default(false)
  instrumentSensorAssembly Boolean             @default(false)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  maintenance              Maintenance         @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  parts                    ServiceReportPart[]
}

model TechnicalReport {
  id              String                @id @default(uuid())
  maintenanceId   String                @unique
  csrNumber       String?
  deliveryTo      String?
  dateReport      DateTime?
  techSupport     String?
  dateIn          DateTime?
  estimateWork    String?
  reasonForReturn String?
  findings        String?
  beforePhotoUrl  String?
  afterPhotoUrl   String?
  termsConditions String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  maintenance     Maintenance           @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  partsList       TechnicalReportPart[]
}

model ServiceReportPart {
  id              String        @id @default(uuid())
  serviceReportId String
  itemNumber      Int
  description     String
  snPnOld         String?
  snPnNew         String?
  createdAt       DateTime      @default(now())
  serviceReport   ServiceReport @relation(fields: [serviceReportId], references: [id], onDelete: Cascade)
}

model TechnicalReportPart {
  id                String          @id @default(uuid())
  technicalReportId String
  itemNumber        Int
  namaUnit          String?
  description       String?
  quantity          Int             @default(1)
  unitPrice         Float?
  totalPrice        Float?
  createdAt         DateTime        @default(now())
  technicalReport   TechnicalReport @relation(fields: [technicalReportId], references: [id], onDelete: Cascade)
}

model ItemHistory {
  id         String    @id @default(uuid())
  itemSerial String
  action     String
  details    String?
  relatedId  String?
  startDate  DateTime  @default(now())
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  item       Item      @relation(fields: [itemSerial], references: [serialNumber])
}

model ActivityLog {
  id             String       @id @default(uuid())
  type           ActivityType
  action         String
  details        String?
  userId         String
  itemSerial     String?
  rentalId       String?
  calibrationId  String?
  maintenanceId  String?
  affectedUserId String?
  vendorId       String?
  createdAt      DateTime     @default(now())
  affectedUser   User?        @relation("AffectedUserLogs", fields: [affectedUserId], references: [id])
  calibration    Calibration? @relation(fields: [calibrationId], references: [id])
  item           Item?        @relation(fields: [itemSerial], references: [serialNumber])
  maintenance    Maintenance? @relation(fields: [maintenanceId], references: [id])
  rental         Rental?      @relation(fields: [rentalId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  vendor         Vendor?      @relation(fields: [vendorId], references: [id])
}

model Vendor {
  id            String          @id @default(uuid())
  name          String
  address       String?
  contactName   String?
  contactPhone  String?
  contactEmail  String?
  service       String?
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  activityLogs  ActivityLog[]
  calibrations  Calibration[]
  customerItems Item[]          @relation("CustomerItems")
  vendorHistory VendorHistory[]
}

model VendorHistory {
  id          String   @id @default(uuid())
  vendorId    String
  action      String
  details     String?
  performance Float?
  createdAt   DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
}

model InventoryCheck {
  id            String               @id @default(uuid())
  scheduledDate DateTime
  completedDate DateTime?
  notes         String?
  userId        String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  name          String?
  isRecurring   Boolean              @default(false)
  frequency     ScheduleFrequency?
  nextScheduleDate DateTime?
  lastNotificationSent DateTime?
  createdBy     User                 @relation(fields: [userId], references: [id])
  items         InventoryCheckItem[]
}

model InventoryCheckItem {
  id             String         @id @default(uuid())
  checkId        String
  itemSerial     String
  verifiedStatus ItemStatus
  notes          String?
  createdAt      DateTime       @default(now())
  inventoryCheck InventoryCheck @relation(fields: [checkId], references: [id])
  item           Item           @relation(fields: [itemSerial], references: [serialNumber])
}

model CalibrationStatusLog {
  id            String        @id @default(uuid())
  calibrationId String
  status        RequestStatus
  notes         String?
  userId        String
  createdAt     DateTime      @default(now())
  calibration   Calibration   @relation(fields: [calibrationId], references: [id])
  changedBy     User          @relation(fields: [userId], references: [id])
}

model MaintenanceStatusLog {
  id            String        @id @default(uuid())
  maintenanceId String
  status        RequestStatus
  notes         String?
  userId        String
  createdAt     DateTime      @default(now())
  maintenance   Maintenance   @relation(fields: [maintenanceId], references: [id])
  changedBy     User          @relation(fields: [userId], references: [id])
}

model RentalStatusLog {
  id        String        @id @default(uuid())
  rentalId  String
  status    RequestStatus
  notes     String?
  userId    String
  createdAt DateTime      @default(now())
  rental    Rental        @relation(fields: [rentalId], references: [id])
  changedBy User          @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  relatedId String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
  MANAGER
}

enum ItemStatus {
  AVAILABLE
  IN_CALIBRATION
  RENTED
  IN_MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  RENTAL_REQUEST
  RENTAL_STATUS_CHANGE
  CALIBRATION_REMINDER
  CALIBRATION_STATUS_CHANGE
  RENTAL_DUE_REMINDER
  MAINTENANCE_REMINDER
  INVENTORY_SCHEDULE
  VENDOR_INFO
  GENERAL_INFO
}

enum ActivityType {
  ITEM_CREATED
  ITEM_UPDATED
  ITEM_DELETED
  CALIBRATION_CREATED
  CALIBRATION_UPDATED
  CALIBRATION_DELETED
  MAINTENANCE_CREATED
  MAINTENANCE_UPDATED
  MAINTENANCE_DELETED
  RENTAL_CREATED
  RENTAL_UPDATED
  RENTAL_DELETED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  VENDOR_CREATED
  VENDOR_UPDATED
  VENDOR_DELETED
}

enum ScheduleFrequency {
  MONTHLY
  YEARLY
}