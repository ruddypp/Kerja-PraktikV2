generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:ganteng@localhost:5432/project-paramata?schema=public"
}

enum Role {
  ADMIN
  USER
}

enum ItemStatus {
  AVAILABLE
  IN_CALIBRATION
  RENTED
  IN_MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  RENTAL_REQUEST
  RENTAL_STATUS_CHANGE
  CALIBRATION_REMINDER
  CALIBRATION_STATUS_CHANGE
  RENTAL_DUE_REMINDER
  MAINTENANCE_REMINDER
  INVENTORY_SCHEDULE
  VENDOR_INFO
  GENERAL_INFO
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rentals               Rental[]
  calibrations          Calibration[]
  maintenances          Maintenance[]
  activities            ActivityLog[]
  inventoryChecks       InventoryCheck[]
  calibrationStatusLogs CalibrationStatusLog[]
  maintenanceStatusLogs MaintenanceStatusLog[]
  rentalStatusLogs      RentalStatusLog[]
  notifications         Notification[]
}

model Item {
  serialNumber    String         @id
  name            String
  partNumber      String
  category        String?
  sensor          String?
  description     String?
  customer        Vendor?        @relation("CustomerItems", fields: [customerId], references: [id])
  customerId      String?
  status          ItemStatus     @default(AVAILABLE)
  lastVerifiedAt  DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  rentals           Rental[]
  calibrations      Calibration[]
  maintenances      Maintenance[]
  histories         ItemHistory[]
  inventoryCheckItems InventoryCheckItem[]
  activityLogs      ActivityLog[]
}

model Rental {
  id           String        @id @default(uuid())
  item         Item          @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial   String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  status       RequestStatus @default(PENDING)
  startDate    DateTime
  endDate      DateTime?
  returnDate   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  statusLogs   RentalStatusLog[]
}

model Calibration {
  id              String        @id @default(uuid())
  item            Item          @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial      String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  status          RequestStatus @default(PENDING)
  calibrationDate DateTime
  validUntil      DateTime?
  certificateUrl  String?
  statusLogs      CalibrationStatusLog[]
  vendor          Vendor        @relation(fields: [vendorId], references: [id])
  vendorId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Maintenance {
  id              String        @id @default(uuid())
  item            Item          @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial      String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  status          RequestStatus @default(COMPLETED)
  description     String?
  beforePhotoUrl  String?
  afterPhotoUrl   String?
  startDate       DateTime      @default(now())
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  statusLogs      MaintenanceStatusLog[]
}

// For usage tracking - rentals, calibrations, maintenance history
model ItemHistory {
  id         String      @id @default(uuid())
  item       Item        @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial String
  action     String      // RENTED, CALIBRATED, MAINTAINED
  details    String?     // Details about the usage
  relatedId  String?     // ID of related rental/calibration/maintenance record
  startDate  DateTime    @default(now())
  endDate    DateTime?
  createdAt  DateTime    @default(now())
}

// For movement and actions tracking
model ActivityLog {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  item       Item?     @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial String?
  action     String    // ADDED, MOVED, ASSIGNED, STATUS_CHANGED, etc.
  details    String?   // Description of the activity
  createdAt  DateTime  @default(now())
}

model Vendor {
  id           String        @id @default(uuid())
  name         String
  address      String?
  contactName  String?
  contactPhone String?
  service      String?
  rating       Float?
  performanceNotes String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  calibrations   Calibration[]
  vendorHistory  VendorHistory[]
  customerItems  Item[]       @relation("CustomerItems")
}

model VendorHistory {
  id           String      @id @default(uuid())
  vendor       Vendor      @relation(fields: [vendorId], references: [id])
  vendorId     String
  action       String      // CALIBRATION_COMPLETED, CONTRACT_RENEWED, etc.
  details      String?
  performance  Float?      // Rating for this specific interaction
  createdAt    DateTime    @default(now())
}

// Inventarisasi berkala
model InventoryCheck {
  id           String      @id @default(uuid())
  scheduledDate DateTime
  completedDate DateTime?
  notes        String?
  createdBy    User        @relation(fields: [userId], references: [id])
  userId       String
  items        InventoryCheckItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model InventoryCheckItem {
  id              String        @id @default(uuid())
  inventoryCheck  InventoryCheck @relation(fields: [checkId], references: [id])
  checkId         String
  item            Item          @relation(fields: [itemSerial], references: [serialNumber])
  itemSerial      String
  verifiedStatus  ItemStatus
  notes           String?
  createdAt       DateTime      @default(now())
}

// Status change logs
model CalibrationStatusLog {
  id            String        @id @default(uuid())
  calibration   Calibration   @relation(fields: [calibrationId], references: [id])
  calibrationId String
  status        RequestStatus
  notes         String?
  changedBy     User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
}

model MaintenanceStatusLog {
  id              String        @id @default(uuid())
  maintenance     Maintenance   @relation(fields: [maintenanceId], references: [id])
  maintenanceId   String
  status          RequestStatus
  notes           String?
  changedBy       User          @relation(fields: [userId], references: [id])
  userId          String
  createdAt       DateTime      @default(now())
}

model RentalStatusLog {
  id            String        @id @default(uuid())
  rental        Rental        @relation(fields: [rentalId], references: [id])
  rentalId      String
  status        RequestStatus
  notes         String?
  changedBy     User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
}

model Notification {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  relatedId   String?          // Reference to related entity (rental/calibration/etc)
  createdAt   DateTime         @default(now())
}