generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:ganteng@localhost:5432/project-paramata?schema=public"
}

enum Role {
  ADMIN
  USER
}

enum ItemStatus {
  AVAILABLE
  IN_CALIBRATION
  RENTED
  IN_MAINTENANCE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ActivityType {
  LOGIN
  ITEM_CREATED
  ITEM_UPDATED
  ITEM_DELETED
  CALIBRATION_CREATED
  CALIBRATION_UPDATED
  CALIBRATION_DELETED
  MAINTENANCE_CREATED
  MAINTENANCE_UPDATED
  MAINTENANCE_DELETED
  RENTAL_CREATED
  RENTAL_UPDATED
  RENTAL_DELETED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  CUSTOMER_DELETED
  REMINDER_CREATED
  NOTIFICATION_CREATED
}

enum RecurrenceType {
  MONTHLY
  YEARLY
}

enum ReminderType {
  CALIBRATION
  RENTAL
  SCHEDULE
  MAINTENANCE
}

enum ReminderStatus {
  PENDING
  SENT
  ACKNOWLEDGED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rentals               Rental[]
  calibrations          Calibration[]
  maintenances          Maintenance[]
  activities            ActivityLog[]
  inventoryChecks       InventoryCheck[]
  calibrationStatusLogs CalibrationStatusLog[]
  maintenanceStatusLogs MaintenanceStatusLog[]
  rentalStatusLogs      RentalStatusLog[]
  affectedUserLogs      ActivityLog[]    @relation("AffectedUserLogs")
  notifications         Notification[]
  reminders             Reminder[]
}

model Item {
  serialNumber    String         @id
  name            String
  partNumber      String
  sensor          String?
  description     String?
  customerId      String?
  status          ItemStatus     @default(AVAILABLE)
  lastVerifiedAt  DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  customer           Customer?   @relation(fields: [customerId], references: [id])
  rentals           Rental[]
  calibrations      Calibration[]
  maintenances      Maintenance[]
  histories         ItemHistory[]
  inventoryCheckItems InventoryCheckItem[]
  activityLogs      ActivityLog[]
  reminders         Reminder[]
}

model Rental {
  id           String        @id @default(uuid())
  itemSerial   String
  userId       String
  customerId   String?       // Reference to the customer who is renting
  poNumber     String?       // Purchase Order Number (opsional)
  doNumber     String?       // Delivery Order Number (opsional)
  status       RequestStatus @default(PENDING)
  startDate    DateTime
  endDate      DateTime?
  returnDate   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Rental details
  renterName     String?     // Name of the person renting the item
  renterPhone    String?     // Phone number of the renter
  renterAddress  String?     // Address of the renter
  initialCondition String?   // Initial condition of the item when rented
  returnCondition String?    // Condition of the item when returned
  
  statusLogs   RentalStatusLog[]
  activityLogs ActivityLog[]
  item         Item          @relation(fields: [itemSerial], references: [serialNumber])
  user         User          @relation(fields: [userId], references: [id])
  customer     Customer?     @relation(fields: [customerId], references: [id])
  reminders    Reminder[]
}

model Calibration {
  id              String        @id @default(uuid())
  itemSerial      String
  userId          String
  status          RequestStatus @default(PENDING)
  calibrationDate DateTime
  validUntil      DateTime?
  
  // Informasi Sertifikat
  certificateNumber String?     // Format: [Nomor Urut]/CAL-PBI/[Bulan Romawi]/[Tahun]
  certificateUrl  String?       // URL ke file PDF sertifikat
  
  // Relasi
  customerId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Catatan tambahan
  notes           String?
  fax             String?
  
  // Relasi ke sertifikat
  certificate     CalibrationCertificate?
  activityLogs    ActivityLog[]
  statusLogs      CalibrationStatusLog[]
  item            Item          @relation(fields: [itemSerial], references: [serialNumber])
  user            User          @relation(fields: [userId], references: [id])
  customer        Customer?     @relation(fields: [customerId], references: [id])
  reminders       Reminder[]
}

// Model untuk detail sertifikat kalibrasi
model CalibrationCertificate {
  id                String     @id @default(uuid())
  calibrationId     String     @unique // One-to-one relationship
  
  // Detail customer untuk Kalibrasi
  customerAddress     String?    // Alamat customer kalibrasi
  customerPhone       String?    // Nomor telepon customer
  customerFax         String?    // Nomor fax customer
  customerName        String?    // Nama customer untuk historis
  
  // Detail Alat
  manufacturer      String?    // Pembuat alat (contoh: RAE Systems)
  instrumentName    String?    // Nama instrumen (contoh: MeshGuard H2S)
  modelNumber       String?    // Model (contoh: FTD 2000 S)
  configuration     String?    // Konfigurasi (contoh: H2S)
  
  // Approval
  approvedBy        String?    // Nama yang menyetujui kalibrasi
  
  // Relations to multiple entries
  gasEntries        GasCalibrationEntry[]
  testEntries       TestResultEntry[]
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  calibration       Calibration @relation(fields: [calibrationId], references: [id], onDelete: Cascade)
}

// Model for gas calibration entries
model GasCalibrationEntry {
  id                String     @id @default(uuid())
  certificateId     String
  gasType           String    // Jenis gas (contoh: Hydrogen Sulphide (H2S))
  gasConcentration  String    // Konsentrasi gas (contoh: 25 ppm)
  gasBalance        String    // Balance gas (contoh: Nitrogen)
  gasBatchNumber    String    // Batch/Lot No (contoh: WO261451-1)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  certificate       CalibrationCertificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

// Model for test result entries
model TestResultEntry {
  id                String     @id @default(uuid())
  certificateId     String
  testSensor        String    // Sensor yang diuji (contoh: Hydrogen Sulphide (H2S))
  testSpan          String    // Span pengujian (contoh: 25 ppm)
  testResult        String    // Pass atau Fail
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  certificate       CalibrationCertificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model Maintenance {
  id              String        @id @default(uuid())
  itemSerial      String
  userId          String
  status          RequestStatus @default(PENDING)
  startDate       DateTime      @default(now())
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relasi ke form
  serviceReport   ServiceReport?
  technicalReport TechnicalReport?
  
  statusLogs      MaintenanceStatusLog[]
  activityLogs    ActivityLog[]
  item            Item          @relation(fields: [itemSerial], references: [serialNumber])
  user            User          @relation(fields: [userId], references: [id])
  reminders       Reminder[]
}

// Form 1: Customer Service Report
model ServiceReport {
  id                String      @id @default(uuid())
  maintenanceId     String      @unique // One-to-one relationship
  
  reportNumber      String?     // No.: ___/CSR-PBI/___/2023
  customer          String?     // PT. Pertamina EP dsb
  location          String?
  brand             String?
  model             String?
  serialNumber      String?     // Item serial sebenarnya
  dateIn            DateTime?
  reasonForReturn   String?
  findings          String?
  action            String?
  
  // Service checklist
  sensorCO          Boolean     @default(false)
  sensorH2S         Boolean     @default(false)
  sensorO2          Boolean     @default(false)
  sensorLEL         Boolean     @default(false)
  lampClean         Boolean     @default(false)
  lampReplace       Boolean     @default(false)
  pumpTested        Boolean     @default(false)
  pumpRebuilt       Boolean     @default(false)
  pumpReplaced      Boolean     @default(false)
  pumpClean         Boolean     @default(false)
  instrumentCalibrate Boolean   @default(false)
  instrumentUpgrade  Boolean    @default(false)
  instrumentCharge   Boolean    @default(false)
  instrumentClean    Boolean    @default(false)
  instrumentSensorAssembly Boolean @default(false)
  
  // Parts List
  parts             ServiceReportPart[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  maintenance       Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
}

// Form 2: Technical Report
model TechnicalReport {
  id                String      @id @default(uuid())
  maintenanceId     String      @unique // One-to-one relationship
  
  csrNumber         String?     // CSR NO: 090/CSR-PBI/IX/24
  deliveryTo        String?     // PT. Archroma Indonesia
  quoNumber         String?     // QUO No:
  dateReport        DateTime?   // Tanggal report (17 Sept 2024)
  techSupport       String?     // Nama technical support (Harry Sutiawan)
  dateIn            DateTime?   // Date In: 10 Sept 2024
  estimateWork      String?     // Estimate Work:
  reasonForReturn   String?     // Maintenance & calibration
  findings          String?     // QRAE 3 SN: M02A053250, Unit perlu kalibrasi ulang...
  action            String?     // Actions taken to fix the issue
  
  beforePhotoUrl    String?
  afterPhotoUrl     String?
  
  // Terms and conditions
  termsConditions   String?     // Opsional: jika terms berbeda antar laporan
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Unit details
  partsList         TechnicalReportPart[]
  maintenance       Maintenance @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
}

model ServiceReportPart {
  id                String       @id @default(uuid())
  serviceReportId   String
  itemNumber        Int          // Nomor urut item
  description       String       // Deskripsi part
  snPnOld           String?      // SN/PN/OLD pada form
  snPnNew           String?      // SN/PN/NEW pada form
  createdAt         DateTime     @default(now())
  serviceReport     ServiceReport @relation(fields: [serviceReportId], references: [id], onDelete: Cascade)
}

model TechnicalReportPart {
  id                String        @id @default(uuid())
  technicalReportId String
  itemNumber        Int           // No
  namaUnit          String?       // Nama Unit (QRAE 3)
  description       String?       // Description (Kalibrasi)
  quantity          Int           @default(1) // QTY
  unitPrice         Float?        // Unit Price
  totalPrice        Float?        // Total Price
  createdAt         DateTime      @default(now())
  technicalReport   TechnicalReport @relation(fields: [technicalReportId], references: [id], onDelete: Cascade)
}

// For usage tracking - rentals, calibrations, maintenance history
model ItemHistory {
  id         String      @id @default(uuid())
  itemSerial String
  action     String      // RENTED, CALIBRATED, MAINTAINED
  details    String?     // Details about the usage
  relatedId  String?     // ID of related rental/calibration/maintenance record
  startDate  DateTime    @default(now())
  endDate    DateTime?
  createdAt  DateTime    @default(now())
  item       Item        @relation(fields: [itemSerial], references: [serialNumber])
}

// For movement and actions tracking
model ActivityLog {
  id               String       @id @default(uuid())
  type             ActivityType
  action           String       // Additional details about the action
  details          String?      // Description of the activity

  // Who performed the action
  userId           String
  
  // What was affected - only one of these will be set
  itemSerial       String?
  rentalId         String?
  calibrationId    String?
  maintenanceId    String?
  affectedUserId   String?
  customerId       String?
  
  createdAt        DateTime     @default(now())
  
  affectedUser     User?        @relation("AffectedUserLogs", fields: [affectedUserId], references: [id])
  calibration      Calibration? @relation(fields: [calibrationId], references: [id])
  item             Item?        @relation(fields: [itemSerial], references: [serialNumber])
  maintenance      Maintenance? @relation(fields: [maintenanceId], references: [id])
  rental           Rental?      @relation(fields: [rentalId], references: [id])
  user             User         @relation(fields: [userId], references: [id])
}

model Customer {
  id           String   @id
  name         String
  address      String?
  contactName  String?
  contactPhone String?
  contactEmail String?
  service      String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  items        Item[]
  calibrations Calibration[]
  rentals      Rental[]
}

model CustomerHistory {
  id          String   @id
  customerId  String
  action      String
  details     String?
  performance Float?
  createdAt   DateTime @default(now())
}

// Inventarisasi berkala
model InventoryCheck {
  id             String               @id @default(uuid())
  name           String?     // Nama jadwal inventory check
  scheduledDate  DateTime
  completedDate  DateTime?
  notes          String?
  userId         String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  isRecurring    Boolean              @default(false)
  recurrenceType RecurrenceType?
  nextDate       DateTime?
  createdBy      User                 @relation(fields: [userId], references: [id])
  items          InventoryCheckItem[]
  reminders      Reminder[]
}

model InventoryCheckExecution {
  id          String                      @id @default(uuid())
  name        String?
  date        DateTime
  status      String // IN_PROGRESS, COMPLETED
  scheduleId  String
  userId      String
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @updatedAt
  items       InventoryCheckExecutionItem[]
}

model InventoryCheckExecutionItem {
  id          String                  @id @default(uuid())
  executionId String
  itemSerial  String
  verified    Boolean                 @default(false)
  execution   InventoryCheckExecution @relation(fields: [executionId], references: [id])
}

model InventoryCheckItem {
  id             String         @id @default(uuid())
  checkId        String
  itemSerial     String
  verifiedStatus ItemStatus
  notes          String?
  createdAt      DateTime       @default(now())
  inventoryCheck InventoryCheck @relation(fields: [checkId], references: [id])
  item           Item           @relation(fields: [itemSerial], references: [serialNumber])
}

// Status change logs
model CalibrationStatusLog {
  id            String        @id @default(uuid())
  calibrationId String
  status        RequestStatus
  notes         String?
  userId        String
  createdAt     DateTime      @default(now())
  calibration   Calibration   @relation(fields: [calibrationId], references: [id])
  changedBy     User          @relation(fields: [userId], references: [id])
}

model MaintenanceStatusLog {
  id            String        @id @default(uuid())
  maintenanceId String
  status        RequestStatus
  notes         String?
  userId        String
  createdAt     DateTime      @default(now())
  maintenance   Maintenance   @relation(fields: [maintenanceId], references: [id])
  changedBy     User          @relation(fields: [userId], references: [id])
}

model RentalStatusLog {
  id        String        @id @default(uuid())
  rentalId  String
  status    RequestStatus
  notes     String?
  userId    String
  createdAt DateTime      @default(now())
  rental    Rental        @relation(fields: [rentalId], references: [id])
  changedBy User          @relation(fields: [userId], references: [id])
}

// Reminder system
model Reminder {
  id              String         @id @default(uuid())
  type            ReminderType
  status          ReminderStatus @default(PENDING)
  title           String
  message         String
  dueDate         DateTime       // The date when the event is due
  reminderDate    DateTime       // The date when the reminder should trigger
  
  // References to related items
  itemSerial      String?
  calibrationId   String?
  rentalId        String?
  scheduleId      String?
  maintenanceId   String?
  
  // Email related fields
  emailSent       Boolean        @default(false)
  emailSentAt     DateTime?
  
  // Acknowledgment field
  acknowledgedAt  DateTime?
  
  // User who should receive the reminder
  userId          String
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id])
  item            Item?          @relation(fields: [itemSerial], references: [serialNumber])
  calibration     Calibration?   @relation(fields: [calibrationId], references: [id])
  rental          Rental?        @relation(fields: [rentalId], references: [id])
  inventoryCheck  InventoryCheck? @relation(fields: [scheduleId], references: [id])
  maintenance     Maintenance?   @relation(fields: [maintenanceId], references: [id])
  
  // Related notifications
  notifications   Notification[]
}

// Notification system
model Notification {
  id              String         @id @default(uuid())
  title           String
  message         String
  isRead          Boolean        @default(false)
  readAt          DateTime?
  shouldPlaySound Boolean        @default(false)  // Flag untuk memainkan suara notifikasi
  
  // References
  reminderId      String?
  userId          String
  
  createdAt       DateTime       @default(now())
  
  // Relations
  user            User           @relation(fields: [userId], references: [id])
  reminder        Reminder?      @relation(fields: [reminderId], references: [id])
}
